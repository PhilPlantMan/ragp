% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_bias.R
\name{calculate_bias}
\alias{calculate_bias}
\title{Compositional bias of a protein sequence}
\usage{
calculate_bias(sequence, id = NULL, frame = NULL, type = c("past", "pvyk",
  "psky", "user"), user = NULL, simplify = NULL)
}
\arguments{
\item{sequence}{A vector of strings representing protein amino acid sequences}

\item{id}{An optional vector of strings representing the names of the corresponding sequences}

\item{frame}{An optional integer defining the frame length for sliding along the sequences}

\item{type}{One of c("past", "pvyk", "psky", "user"), if set to "past" P, A, S and T will be consdered (AGP bias), if type "pvyk", P, V, Y, and K (PRP bias) will be consdered, if type "psky" P, S, K and Y (EXT bias) will be consdered and if type  set to "user" a user specified input must be provided}

\item{user}{An optional character vector, if type set to "user", vector should contain amino acid one letter symbols eg. c("P", "V", "K", "C", "Y", "T") or strings corresponding to amino acid motifs eg c("PTYK", "PVKC").}

\item{simplify}{Logical, should the function return a data.frame instead of a list. If simplify set to TRUE only the maximum bias_percent and bias_sum from all frames in a sequence are kept in the output. Defaults to FALSE.}
}
\value{
if simplify == F a named list with components:
\describe{
\item{$bias_sum}{An integer vector, or list of vectors (if frame specified), each element indicating the number of specified amino acids in each input sequence}
\item{$seq_len}{An integer vector, each element indicating the length of each input sequence}
\item{$bias_percent}{An integer vector, or list of vectors (if frame specified), each element indicating the percent of specified amino acids in each input sequence or per frame if frame specified}
\item{$id}{Character vector, as supplied in the function call or NA if not supplied}
\item{$frame}{Integer, as supplied in the function call or NULL if not supplied}
\item{$type}{Character, as supplied in the function call, defaults to "past"}
\item{$user}{Character vector, as supplied in the function call or NULL if not supplied}
}
if simplify == TRUE a data frame with column names corresponding to the list components.
}
\description{
Calculate the compositional bias of whole protein sequences, or slide along the sequences and calculate the bias for all subsequences of a defined length (frame). Sequence motifs can also be searched.
}
\examples{

library(ragp)
data(at_nsp)

test_bias <- calculate_bias(sequence = at_nsp$sequence[1:20],
                            id = at_nsp$Transcript.id[1:20])

#when frame is not specified the output can be converted to a data frame for easier manipulation
as.data.frame(do.call(cbind, test_bias))

test_bias <- calculate_bias(sequence = at_nsp$sequence[1:20],
                            id = at_nsp$Transcript.id[1:20],
                            frame = 20,
                            user = c("P", "V", "K", "C", "Y", "T"))

#for motif search input a string instead of a character vector to user argument
test_bias <- calculate_bias(sequence = at_nsp$sequence,
                            id = at_nsp$Transcript.id,
                            user = "PTYK")

#count all sequencs with a "PAST" bias over 45\%
test_bias <- calculate_bias(sequence = at_nsp$sequence,
                            id = at_nsp$Transcript.id,
                            simplify = TRUE)
nrow(test_bias[test_bias$bias_percent >= 45, ])

# count all sequencs with 2 or more SPPP motifs
test_bias <- calculate_bias(sequence = at_nsp$sequence,
                            id = at_nsp$Transcript.id,
                            simplify = TRUE,
                            user = "SPPP")
nrow(test_bias[test_bias$bias_sum >= 2,])

}
\seealso{
\code{\link[ragp]{scan_ag}}
}
